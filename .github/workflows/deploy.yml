# .github/workflows/deploy.yml

name: Deploy to VPS

# Se dÃ©clenche Ã  chaque push sur la branche "main"
on:
  push:
    branches:
      - main

jobs:
  deploy:
    # Utilise la derniÃ¨re version d'Ubuntu pour l'environnement d'exÃ©cution
    runs-on: ubuntu-latest

    steps:
      # Ã‰tape 1: Affiche un message de dÃ©marrage
      - name: Start deployment
        run: echo "ðŸš€ Starting deployment to VPS..."

      # Ã‰tape 2: Connexion SSH et exÃ©cution du script de dÃ©ploiement
      - name: SSH and Deploy
        # Utilise une action populaire et fiable pour les commandes SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          script: |
            # Se dÃ©place dans le rÃ©pertoire de travail sur le VPS
            cd ${{ secrets.WORK_DIR }}

            # RÃ©cupÃ¨re les derniÃ¨res modifications depuis la branche main
            echo "ðŸšš Pulling latest changes from main branch..."
            git pull origin main

            # Retour au rÃ©pertoire global
            echo "ðŸš€ Returning to global directory..."
            cd ..

            # Reconstruit l'image Docker du blog sans utiliser le cache pour s'assurer que les nouveaux fichiers sont pris en compte
            echo "ðŸ“¦ Building the Docker image..."
            docker compose build --no-cache const-foo

            # RedÃ©marre le conteneur du blog pour appliquer les changements
            # --force-recreate garantit que le conteneur est recrÃ©Ã© avec la nouvelle image
            echo "ðŸš€ Restarting the container..."
            docker compose up -d --force-recreate const-foo

            # (Optionnel) Nettoie les anciennes images Docker non utilisÃ©es
            echo "ðŸ§¹ Pruning old Docker images..."
            docker image prune -f

            echo "âœ… Deployment finished successfully!"
